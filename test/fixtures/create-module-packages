#!/usr/bin/node

(() => {
  'use strict';

  const MODULE_FILEPATH_LINE_START = 'encrypting ';
  const ENCRYPTED_FILEPATH_LINE_START = 'output file: ';

  const path              = require('path');
  const util              = require('util');
  const UtilFs            = require('../../lib/helpers/fs');
  const UtilChildProcess  = require('./../../lib/helpers/child-process');

  const dbg = util.debuglog('create-module-packages');

  const MODULES_DIRECTORY = path.resolve(__dirname, './modules');
  const MODULE_PACKAGES_DIRECTORY = path.resolve(__dirname, './modules-packages');

  const TEST_PUBLIC_KEY = path.resolve(__dirname, './keys/test.pub');
  const TEST_SIGNATURE_PRIVATE_KEY = path.resolve(__dirname, './keys/test-signature.pem');

  const MODULE_PATHS = [
    {filepath: path.resolve(MODULES_DIRECTORY, './a-1.0.0'), keepModulePackage: true, signatureKey: false},
    {filepath: path.resolve(MODULES_DIRECTORY, './a-1.0.0'), keepModulePackage: false, signatureKey: TEST_SIGNATURE_PRIVATE_KEY, signatureName: 'test'},
    path.resolve(MODULES_DIRECTORY, './a-1.1.0'),
    path.resolve(MODULES_DIRECTORY, './b-1.0.0'),
    path.resolve(MODULES_DIRECTORY, './b-1.1.0'),
    path.resolve(MODULES_DIRECTORY, './c-1.0.0'),
    path.resolve(MODULES_DIRECTORY, './c-1.1.0'),
    path.resolve(MODULES_DIRECTORY, './d-1.0.0'),
    path.resolve(MODULES_DIRECTORY, './d-1.1.0'),
  ];

  const options = {};

  process.argv.forEach((arg, index) => {
    if ('--tool-dir' === arg) {
      options.toolDir = path.resolve(process.cwd(), process.argv[index + 1]);
    } else if ('-s' === arg || '--signature-key' === arg) {
      options.signatureKey = path.resolve(process.cwd(), process.argv[index + 1]);
    }
  });

  if (!options.hasOwnProperty('signatureKey')) {
    console.error('No bits signature key given, cannot sign modules');

    process.exit(1);

    return;
  }

  if (!options.hasOwnProperty('toolDir')) {
    console.warn('WARNING: Build tools directory not specified, assuming the current directory is the tool directory.');
    options.toolDir = process.cwd();
  }

  dbg(require('util').inspect(options, { colors: true }));

  function createModulePackage(filepath, moduleOptions) {
    const packageModuleCommand = path.resolve(options.toolDir, './package-module.py');
    console.log(require('util').inspect(moduleOptions, { colors: true }));

    const args = [
      '-m', filepath,
      '-e', TEST_PUBLIC_KEY,
      '-s', moduleOptions.signatureKey || options.signatureKey
    ];

    return UtilChildProcess.spawn(packageModuleCommand, args)
    .then((results) => {
      if (0 !== results.code) {
        return Promise.reject(new Error('Failed to package module'));
      } else {
        const outputFiles = {};

        let stdout = results.stdout.reduce((lines, line) => lines.concat(line.split('\n')), []);

        stdout.forEach((line) => {
          if (line.startsWith(ENCRYPTED_FILEPATH_LINE_START)) {
            outputFiles.encryptedFilepath = line.substring(ENCRYPTED_FILEPATH_LINE_START.length);
          } else if (line.startsWith(MODULE_FILEPATH_LINE_START)) {
            outputFiles.moduleFilepath = line.substring(MODULE_FILEPATH_LINE_START.length);
          }
        });

        const filenameRegexp = new RegExp('(\\w)-([\\d\.]+)-([\\w\\d]+)\.(\\w+)');

        if (outputFiles.hasOwnProperty('encryptedFilepath')) {
          const filenameParsed = filenameRegexp.exec(path.basename(outputFiles.encryptedFilepath));

          if (!filenameParsed) {
            console.warn('WARNING: Unable to parse encrypted filename.');
          } else {
            const modName = filenameParsed[1];
            const modVersion = filenameParsed[2];

            let filename = modName + '-' + modVersion;

            const signatureName = moduleOptions.signatureName || 'bits';

            filename += '.' + signatureName + '-signed';

            filename += path.extname(outputFiles.encryptedFilepath);

            dbg(require('util').inspect(filename, { colors: true }));

            const dstPath = path.resolve(MODULE_PACKAGES_DIRECTORY, filename);
            UtilFs.rename(outputFiles.encryptedFilepath, dstPath)
            .then(null, (err) => {
              console.error('Failed to move encrypted file.');
            });
          }
        }

        if (outputFiles.hasOwnProperty('moduleFilepath')) {
          if (moduleOptions.keepModulePackage) {
            const filenameParsed = filenameRegexp.exec(path.basename(outputFiles.encryptedFilepath));

            if (!filenameParsed) {
              console.warn('WARNING: Unable to parse encrypted filename.');
            } else {
              const modName = filenameParsed[1];
              const modVersion = filenameParsed[2];

              let filename = modName + '-' + modVersion;

              filename += path.extname(outputFiles.moduleFilepath);

              const dstPath = path.resolve(MODULE_PACKAGES_DIRECTORY, filename);
              UtilFs.rename(outputFiles.moduleFilepath, dstPath)
              .then(null, (err) => {
                console.error('Failed to move module file.');
              });
            }
          } else {
            UtilFs.unlink(outputFiles.moduleFilepath)
            .then(null, (err) => {
              console.error('Failed to remove module file: %s', err.toString());
            });
          }
        }
      }
    });
  }

  MODULE_PATHS.reduce((promise, modulePath) => {
    return promise
    .then(() => {
      const moduleOptions = {};

      if ('string' !== typeof(modulePath)) {
        moduleOptions.keepModulePackage = modulePath.keepModulePackage;
        moduleOptions.signatureKey = modulePath.signatureKey;
        moduleOptions.signatureName = modulePath.signatureName;
        modulePath = modulePath.filepath;
      }

      return createModulePackage(modulePath, moduleOptions);
    })
    .then(null, (err) => {
      console.error('Failed to package %s', modulePath);
    });
  }, Promise.resolve());
})();
